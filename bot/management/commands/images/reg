from django.core.management.base import BaseCommand
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from bot.models import UserRegistration
import asyncio

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7795385929:AAF98EsKowGgpg9wgEN91qpZZh5x5tLHTcM")

LANGUAGE_SELECTION_IMAGE = "bot/management/commands/images/lang.jpg"
MAIN_MENU_IMAGE = "bot/management/commands/images/menu.jpg"
GAME_MENU_IMAGE = "bot/management/commands/images/games.jpg"

async def delete_previous_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if isinstance(update.callback_query, CallbackQuery):
        chat_id = update.callback_query.message.chat_id
        
    previous_message_id = context.user_data.get('previous_message_id')
    if previous_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=previous_message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")
    
    # Also try to delete the message that triggered the callback
    if isinstance(update.callback_query, CallbackQuery):
        try:
            await update.callback_query.message.delete()
        except Exception as e:
            print(f"Error deleting callback message: {e}")

def get_text(context, ru_text, en_text):
    return ru_text if context.user_data.get('language') == 'ru' else en_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await delete_previous_message(update, context)
    
    language_keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(language_keyboard)

    with open(LANGUAGE_SELECTION_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id

async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    await delete_previous_message(update, context)

    if query.data == 'lang_ru':
        context.user_data['language'] = 'ru'
    else:
        context.user_data['language'] = 'en'

    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await delete_previous_message(update, context)
    
    menu_text = get_text(context, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", "Welcome to the main menu!")

    main_menu_keyboard = [
        [InlineKeyboardButton(get_text(context, "üéÆ –ò–≥—Ä–∞—Ç—å", "üéÆ Play"), callback_data='play')],
        [InlineKeyboardButton(get_text(context, "üë• –ö–∞–Ω–∞–ª", "üë• Channel"), url="https://t.me/txitNGBrugg5MTRi")],
        [InlineKeyboardButton(get_text(context, "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Change Language"), callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(main_menu_keyboard)

    with open(MAIN_MENU_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption=menu_text,
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    if context.user_data.get('done_subscribing', False):
        await show_games_menu(query, context)
    else:
        message = await query.message.reply_text(
            get_text(
                context,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                "Please send a request to join our channel and click 'Done' to continue."
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(get_text(context, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "Go to Channel"), url="https://t.me/+txitNGBrugg5MTRi")],
                [InlineKeyboardButton(get_text(context, "–ì–æ—Ç–æ–≤–æ", "Done"), callback_data='continue_after_subscribe')],
                [InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), callback_data='show_main_menu')]
            ])
        )
        context.user_data['previous_message_id'] = message.message_id

async def continue_after_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    context.user_data['done_subscribing'] = True
    message = await query.message.reply_text(
        get_text(
            context,
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            "Thank you! You can now continue."
        )
    )
    context.user_data['previous_message_id'] = message.message_id
    
    await asyncio.sleep(2)
    await show_games_menu(query, context)

async def show_games_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = query.message.chat.id
    previous_message_id = context.user_data.get('previous_message_id')
    if previous_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=previous_message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")

    games_keyboard = [
        [
            InlineKeyboardButton("‚úàÔ∏è Aviator", callback_data='game_1'),
            InlineKeyboardButton("üöÄ LuckyJet", callback_data='game_2'),
            InlineKeyboardButton("üöó Speed&Cash", callback_data='game_3')
        ],
        [
            InlineKeyboardButton("üí£ Mines", callback_data='game_4'),
            InlineKeyboardButton("üëë Royal Mines", callback_data='game_5'),
            InlineKeyboardButton("ü™¶ Brawl Pirates", callback_data='game_6')
        ],
        [
            InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), callback_data='show_main_menu')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(games_keyboard)

    with open(GAME_MENU_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption=get_text(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", "Choose a game:"),
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id
        
async def game_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    selected_game = query.data.split('_')[-1]

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration_message = get_text(
        context,
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!, –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - –µ—Å–ª–∏ —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –µ–≥–æ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ABUZNIK24 –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.\n"
        "3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚Äù.\n"
        "4. –ï—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ —à–∞–≥–∏, –Ω–∞—à –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –∏–º —Å–∏–≥–Ω–∞–ª—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!",
        "üëã Hello!, To get the most out of this bot, you need to follow these steps:\n"
        "1. Register a new account - if you already have an account, please leave it and register a new one.\n"
        "2. Use the promo code ABUZNIK24 when registering a new account. This is important, as our AI only works with new accounts.\n"
        "3. After registration, click on the ‚ÄúCheck registration‚Äù button.\n"
        "4. If you do not follow these steps, our bot will not be able to add your account to its database, and the signals it provides may not be suitable.\n"
        "Thank you for your understanding!"
    )
    registration_keyboard = [
        [InlineKeyboardButton(get_text(context, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "Register"), url="https://1wayto.life/?p=mn62")],
        [InlineKeyboardButton(get_text(context, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "Check Registration"), callback_data='check_registration')],
        [InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), callback_data='go_back')]
    ]
    reply_markup = InlineKeyboardMarkup(registration_keyboard)

    await query.message.reply_text(
        registration_message,
        reply_markup=reply_markup
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    not_registered_message = get_text(
        context,
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        "You are not registered. Please register to continue."
    )
    
    await query.message.reply_text(not_registered_message)

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)
    await show_games_menu(query, context)

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)
    await start(update, context)

class Command(BaseCommand):
    help = 'Telegram Bot'

    def handle(self, *args, **kwargs):
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(language_selected, pattern="^lang_"))
        application.add_handler(CallbackQueryHandler(change_language, pattern="^lang_change$"))
        application.add_handler(CallbackQueryHandler(play, pattern="^play$"))
        application.add_handler(CallbackQueryHandler(go_back, pattern="^go_back$"))
        application.add_handler(CallbackQueryHandler(game_selected, pattern="^game_"))
        application.add_handler(CallbackQueryHandler(start, pattern="^start$"))
        application.add_handler(CallbackQueryHandler(show_main_menu, pattern="^show_main_menu$"))
        application.add_handler(CallbackQueryHandler(check_registration, pattern="^check_registration$"))
        application.add_handler(CallbackQueryHandler(continue_after_subscribe, pattern="^continue_after_subscribe$"))

        application.run_polling()

       