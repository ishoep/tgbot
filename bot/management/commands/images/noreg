from django.core.management.base import BaseCommand
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from bot.models import UserRegistration
import asyncio

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7795385929:AAF98EsKowGgpg9wgEN91qpZZh5x5tLHTcM")

LANGUAGE_SELECTION_IMAGE = "bot/management/commands/images/lang.jpg"
MAIN_MENU_IMAGE = "bot/management/commands/images/menu.jpg"
GAME_MENU_IMAGE = "bot/management/commands/images/games.jpg"

async def delete_previous_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if isinstance(update.callback_query, CallbackQuery):
        chat_id = update.callback_query.message.chat_id
        
    previous_message_id = context.user_data.get('previous_message_id')
    if previous_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=previous_message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")
    
    # Also try to delete the message that triggered the callback
    if isinstance(update.callback_query, CallbackQuery):
        try:
            await update.callback_query.message.delete()
        except Exception as e:
            print(f"Error deleting callback message: {e}")

def get_text(context, ru_text, en_text):
    return ru_text if context.user_data.get('language') == 'ru' else en_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await delete_previous_message(update, context)
    
    language_keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(language_keyboard)

    with open(LANGUAGE_SELECTION_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id

async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    await delete_previous_message(update, context)

    if query.data == 'lang_ru':
        context.user_data['language'] = 'ru'
    else:
        context.user_data['language'] = 'en'

    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await delete_previous_message(update, context)
    
    menu_text = get_text(context, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", "Welcome to the main menu!")

    main_menu_keyboard = [
        [InlineKeyboardButton(get_text(context, "üéÆ –ò–≥—Ä–∞—Ç—å", "üéÆ Play"), callback_data='play')],
        [InlineKeyboardButton(get_text(context, "üë• –ö–∞–Ω–∞–ª", "üë• Channel"), url="https://t.me/txitNGBrugg5MTRi")],
        [InlineKeyboardButton(get_text(context, "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Change Language"), callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(main_menu_keyboard)

    with open(MAIN_MENU_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption=menu_text,
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    if context.user_data.get('done_subscribing', False):
        await show_games_menu(query, context)
    else:
        message = await query.message.reply_text(
            get_text(
                context,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                "Please send a request to join our channel and click 'Done' to continue."
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(get_text(context, "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "Go to Channel"), url="https://t.me/+txitNGBrugg5MTRi")],
                [InlineKeyboardButton(get_text(context, "–ì–æ—Ç–æ–≤–æ", "Done"), callback_data='continue_after_subscribe')],
                [InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), callback_data='show_main_menu')]
            ])
        )
        context.user_data['previous_message_id'] = message.message_id

async def continue_after_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    context.user_data['done_subscribing'] = True
    message = await query.message.reply_text(
        get_text(
            context,
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            "Thank you! You can now continue."
        )
    )
    context.user_data['previous_message_id'] = message.message_id
    
    await asyncio.sleep(2)
    await show_games_menu(query, context)

async def show_games_menu(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = query.message.chat.id
    previous_message_id = context.user_data.get('previous_message_id')
    if previous_message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=previous_message_id)
        except Exception as e:
            print(f"Error deleting message: {e}")

    games_keyboard = [
        [
            InlineKeyboardButton("‚úàÔ∏è Aviator", callback_data='game_1'),
            InlineKeyboardButton("üöÄ LuckyJet", callback_data='game_2'),
            InlineKeyboardButton("üöó Speed&Cash", callback_data='game_3')
        ],
        [
            InlineKeyboardButton("üí£ Mines", callback_data='game_4'),
            InlineKeyboardButton("üëë Royal", callback_data='game_5'),
            InlineKeyboardButton("ü™¶ Brawl Pirates", callback_data='game_6')
        ],
        [
            InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), callback_data='show_main_menu')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(games_keyboard)

    with open(GAME_MENU_IMAGE, 'rb') as photo:
        message = await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo,
            caption=get_text(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", "Choose a game:"),
            reply_markup=reply_markup
        )
        context.user_data['previous_message_id'] = message.message_id
        
async def game_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)

    selected_game = query.data.split('_')[-1]

    game_urls = {
        '1': "https://aviator-predictor-tgbot.netlify.app",
        '2': "https://lucky-jet-predictor-tgbot.netlify.app",
        '3': "https://speedandcash-predictor-tgbot.netlify.app",
        '4': "https://mines-predictor-tgbot.netlify.app",
        '5': "https://royal-mines-predictor-tgbot.netlify.app",
        '6': "https://brawl-pirates-predictor-tgbot.netlify.app",
    }

    game_details = {
        '1': {
            'message': get_text(
                context,
                "‚úàÔ∏è Aviator - —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞, –≥–¥–µ –≤–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–æ –æ—Ç–ª–µ—Ç–∞ —Å–∞–º–æ–ª–µ—Ç–∞ —Å –≤–∞—à–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏.\n"
                "–ß–µ–º –¥–æ–ª—å—à–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ, —Ç–µ–º –±–æ–ª–µ–µ —â–µ–¥—Ä–æ –æ–Ω –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç –≤–∞—Å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏.\n"
                "–ù–∞–π–¥–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≤–æ–µ–≤–∞–Ω–∏—è –ø–æ–±–µ–¥—ã –≤ —ç—Ç–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä–µ!\n"
                "–ù–∞—à –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI, –æ–±–ª–∞–¥–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤–ø–ª–æ—Ç—å –¥–æ 85%,\n"
                "—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã.",
                "‚úàÔ∏è Aviator is an exciting gambling game where your skill is to plan your bet before the plane flies away with your money.\n"
                "The longer it stays in the air, the more generously it rewards you at the end of the game.\n"
                "Find the optimal moment to invest and win in this thrilling game!\n"
                "Our innovative bot, powered by OpenAI's advanced neural network, can predict accurate odds with up to 85% probability,\n"
                "allowing you to make informed bets and increase your chances of winning."
            ),
            'image': "bot/management/commands/images/aviator.png"
        },
        '2': {
            'message': get_text(
                context,
                "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Lucky Jet - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä—ã, –≥–¥–µ –∫–∞–∂–¥–∞—è –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–∞ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –æ—Ç–ª–µ—Ç–æ–º –ª–µ—Ç—è—â–µ–≥–æ —Å–∞–º–æ–ª–µ—Ç–∞,\n"
                "–∫–æ—Ç–æ—Ä—ã–π –Ω–µ—Å–µ—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –≤ –Ω–µ–±–µ—Å–∞.\n"
                "–ß–µ–º –¥–∞–ª—å—à–µ –ø—É—Ç—å –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç, —Ç–µ–º –±–æ–ª–µ–µ —â–µ–¥—Ä—ã–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏.\n"
                "–ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –º–∞–≥–∏—é –º–æ–º–µ–Ω—Ç–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏, —É–≥–∞–¥–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç –¥–ª—è –ø–æ–±–µ–¥—ã, –≤–µ–¥—å –≤ —ç—Ç–æ–º –∞–∑–∞—Ä—Ç–Ω–æ–º –ø–æ–ª–µ—Ç–µ –∫–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–ù–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –±–æ—Ç –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É.\n"
                "–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –∏–≥—Ä—É —Å Lucky Jet, –≥–¥–µ —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!",
                "üöÄ Welcome to the world of Lucky Jet - an exciting gambling game where every bet you make must be timed with the flight of a plane,\n"
                "that takes your money to the skies.\n"
                "The farther it flies, the greater your reward upon landing.\n"
                "Feel the magic of the perfect bet moment, guess the timing for victory because in this thrilling flight every second counts!\n"
                "Our trusted bot is always there to help you make the right choice and increase your chances of winning.\n"
                "Join the game with Lucky Jet where luck is always on your side!"
            ),
            'image': "bot/management/commands/images/luckyjet.png"
        },
        '3': {
            'message': get_text(
                context,
                "üöó Speed & Cash –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –≤—ã–∏–≥—Ä—ã—à–∞–º–∏.\n"
                "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –≥–æ–Ω–∫–∏ –∏ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã, —ç—Ç–∞ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º!\n"
                "–ù–∞—à –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç –û—Ä–µ–ø–∞, –æ–±–ª–∞–¥–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤–ø–ª–æ—Ç—å –¥–æ 85%,\n"
                "—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã.",
                "üöó Speed & Cash offers an exciting gaming experience with elements of adrenaline and quick wins.\n"
                "If you enjoy racing and gambling, this game could be a great choice!\n"
                "Our innovative bot, based on advanced neural network technology, has the ability to predict accurate odds with up to 85% probability,\n"
                "allowing you to make informed bets and increase your chances of successful game completion."
            ),
            'image': "bot/management/commands/images/speed_and_cash.png"
        },
        '4': {
            'message': get_text(
                context,
                "üí£ Mines - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1 win, –∫–æ—Ç–æ—Ä–∞—è –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∏–≥—Ä–æ–π –°–∞–ø–µ—Ä.\n"
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏, –∏–∑–±–µ–≥–∞—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ª–æ–≤—É—à–∫–∏.\n"
                "–ù–∞—à —É–º–Ω—ã–π –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç –û—Ä–µ–ø–∞, –æ–±–ª–∞–¥–∞–µ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –Ω–∞ –ø–æ–ª–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 85%.\n"
                "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –µ–≥–æ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É.\n"
                "–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä Mines –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
                "–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ - 1 –º–∏–Ω—É—Ç–∞",
                "üí£ Mines is an exciting gambling game available at 1 win bookmaker, inspired by the classic Minesweeper game.\n"
                "Your goal is to open safe cells, avoiding traps.\n"
                "Our smart bot, developed on a neural network basis, has an amazing ability to predict the location of stars with an 85% probability.\n"
                "Trust its intuition and strategy to increase your chances of winning.\n"
                "Dive into the thrilling world of Mines and test your luck right now!\n"
                "The nearest forecast time is 1 minute."
            ),
            'image': "bot/management/commands/images/mines.png"
        },
        '5': {
            'message': get_text(
                context,
                "üëë Royal Mines - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ Twin, –∫–æ—Ç–æ—Ä–∞—è –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∏–≥—Ä–æ–π –°–∞–ø—ë—Ä.\n"
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏, –∏–∑–±–µ–≥–∞—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ª–æ–≤—É—à–∫–∏.\n"
                "–ù–∞—à —É–º–Ω—ã–π –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç –û—Ä–µ–ø–∞, –æ–±–ª–∞–¥–∞–µ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–æ–º–± –Ω–∞ –ø–æ–ª–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é > 85%.\n"
                "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –µ–≥–æ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É.\n"
                "–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä Royal Mines –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
                "–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ - 1 –º–∏–Ω—É—Ç–∞",
                "üëë Royal Mines is an exciting gambling game available at Twin bookmaker, inspired by the classic game Mines.\n"
                "Your task is to open safe cells, avoiding falling into traps.\n"
                "Our smart bot, developed on the basis of the neural network from Orep, has an amazing ability to predict the location of bombs on the field with a probability of > 85%.\n"
                "Trust its intuition and strategy to increase your chances of winning.\n"
                "Dive into the exciting world of Royal Mines and try your luck right now!\n"
                "The nearest forecast time is 1 minute."
            ),
            'image': "bot/management/commands/images/royal.png"
        },
        '6': {
            'message': get_text(
                context,
                "ü™¶ Brawl Pirates - —ç—Ç–æ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ Twin, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—ã–±–æ—Ä–µ –ß–µ—Ä–µ–ø–∞.\n"
                "–í —ç—Ç–æ–π –∏–≥—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –∏ –Ω–∞–π—Ç–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ø–∏—Ä–∞—Ç–æ–≤, –≤—ã–∏–≥—Ä–∞–≤ —Ç–µ–º —Å–∞–º—ã–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏.\n"
                "–ò–≥—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö —á–µ—Ä–µ–ø–æ–≤ –∏ —É–≥–∞–¥–∞—Ç—å, –≤ –∫–∞–∫–æ–º –∏–∑ –Ω–∏—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–∫—Ä–æ–≤–∏—â–µ.\n"
                "–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 97%.\n"
                "–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ - 1 –º–∏–Ω—É—Ç–∞",
                "ü™¶ Brawl Pirates is a game at the Twin bookmaker, based on Skull selection.\n"
                "In this game, users can test their luck and find pirate treasures to win real money.\n"
                "The game offers each player the chance to choose one of three skulls and guess where the treasure is hidden.\n"
                "Our bot, based on a neural network, can predict the outcome with a 97% probability.\n"
                "The nearest forecast time is 1 minute."
            ),
            'image': "bot/management/commands/images/brawl_pirates.png"
        }
    }
    

    game_info = game_details.get(selected_game)
    if game_info:
        web_app_url = game_urls.get(selected_game)
        with open(game_info['image'], 'rb') as photo:
            message = await context.bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo,
                caption=game_info['message'],
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(get_text(context, "–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", "Get Signal"), 
                                        web_app={"url": web_app_url})],
                    [InlineKeyboardButton(get_text(context, "–ù–∞–∑–∞–¥", "Back"), 
                                        callback_data='go_back')]
                ])
            )
            context.user_data['previous_message_id'] = message.message_id
    else:
        message = await query.message.reply_text(
            get_text(context, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã.", 
                    "Sorry, information for the selected game could not be found.")
        )
        context.user_data['previous_message_id'] = message.message_id

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)
    await show_games_menu(query, context)

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await delete_previous_message(update, context)
    await start(update, context)

class Command(BaseCommand):
    help = 'Telegram Bot'

    def handle(self, *args, **kwargs):
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(language_selected, pattern="^lang_"))
        application.add_handler(CallbackQueryHandler(change_language, pattern="^lang_change$"))
        application.add_handler(CallbackQueryHandler(play, pattern="^play$"))
        application.add_handler(CallbackQueryHandler(go_back, pattern="^go_back$"))
        application.add_handler(CallbackQueryHandler(game_selected, pattern="^game_"))
        application.add_handler(CallbackQueryHandler(start, pattern="^start$"))
        application.add_handler(CallbackQueryHandler(show_main_menu, pattern="^show_main_menu$"))
        application.add_handler(CallbackQueryHandler(continue_after_subscribe, pattern="^continue_after_subscribe$"))

        application.run_polling()